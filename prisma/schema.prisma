generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement())
  email           String     @unique
  password        String
  firstName       String?
  lastName        String?
  phone           String?
  city            String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  favorites       Favorite[]
  listings        Listing[]
  RecieverMessage Message[]  @relation("receiverMessages")
  SenderMessage   Message[]  @relation("senderMessages")
}

model Admin {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  permissions       String[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  approvals         AdminApproval[]
  subscriptionPlans SubscriptionPlan[]
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  listings  Listing[]
}

model City {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  listings  Listing[]
}

model Listing {
  id               Int               @id @default(autoincrement())
  title            String
  description      String
  slug             String            @unique
  type             ListingType       @default(PROFESSIONAL)
  price            Float
  negotiable       Boolean           @default(false)
  tags             String[]
  highlights       String[]
  businessHours    Json?
  phone            String?
  website          String?
  status           ListingStatus     @default(DRAFT)
  listingTier      ListingTier
  cityId           String
  categoryId       String
  userId           Int
  businessCategory String?
  establishedYear  Int?
  serviceArea      String?
  teamSize         String?
  rating           Float?
  reviewCount      Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  expiresAt        DateTime
  isBannerEnabled  Boolean           @default(false)
  subscriptionId   String?
  youtubeVideo     String?   // Add this line
  locationUrl      String?   // Add this line
  serviceRadius    Int? 
  AdminApproval    AdminApproval?
  Favorite         Favorite[]
  images           Image[]
  city             City              @relation(fields: [cityId], references: [id])
  category         Category          @relation(fields: [categoryId], references: [id])
  subscription     SubscriptionPlan? @relation(fields: [subscriptionId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
  ListingImage     ListingImage[]
  Message          Message[]
  Payment          Payment[]
  promotions       Promotion[]
}

model Image {
  id        String  @id @default(uuid())
  url       String
  isPrimary Boolean @default(false)
  isBanner  Boolean @default(false)
  listingId Int
  listing   Listing @relation(fields: [listingId], references: [id])
}

model Promotion {
  id           String    @id @default(uuid())
  listingId    Int
  price        Float
  startDate    DateTime
  endDate      DateTime?
  durationDays Int
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  listing      Listing   @relation(fields: [listingId], references: [id])

  @@index([listingId])
  @@index([isActive])
  @@index([endDate])
}

model Banner {
  id          Int        @id @default(autoincrement())
  Image       String
  ListingUrl  String?
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
}

model SubscriptionPlan {
  id            String      @id @default(uuid())
  name          String
  description   String
  durationDays  Int
  promotionDays Int
  tierType      ListingTier
  isActive      Boolean     @default(true)
  adminId       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  price         Decimal?    @db.Decimal
  listings      Listing[]
  admin         Admin       @relation(fields: [adminId], references: [id])

  @@index([tierType])
  @@index([isActive])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    Int
  listingId Int
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, listingId])
}

model ListingImage {
  id        String   @id @default(uuid())
  url       String
  listingId Int
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id])
}

model AdminApproval {
  id        String        @id @default(uuid())
  listingId Int           @unique
  adminId   String
  status    ListingStatus @default(PENDING_APPROVAL)
  comments  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  admin     Admin         @relation(fields: [adminId], references: [id])
  listing   Listing       @relation(fields: [listingId], references: [id])
}

model Message {
  id         String   @id @default(uuid())
  senderId   Int
  receiverId Int
  listingId  Int
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  listing    Listing  @relation(fields: [listingId], references: [id])
  receiver   User     @relation("receiverMessages", fields: [receiverId], references: [id])
  sender     User     @relation("senderMessages", fields: [senderId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([listingId])
}

model Payment {
  id            String        @id @default(uuid())
  listingId     Int
  amount        Float
  currency      String        @default("INR")
  paymentMethod String
  transactionId String
  status        PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  listing       Listing       @relation(fields: [listingId], references: [id])

  @@index([listingId])
  @@index([transactionId])
}

model OfferZone {
  id           Int       @id @default(autoincrement())
  vendorName   String
  discount     String
  promoCode    String
  category     String
  description  String
  validUntil   String
  link         String?
  rating       Float
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  @@index([isActive])
  @@index([validUntil])
}

enum ListingType {
  PRIVATE_INDIVIDUAL
  PROFESSIONAL
}

enum ListingTier {
  FREE
  PREMIUM
  PREMIUM_PLUS
}

enum ListingStatus {
  DRAFT
  PENDING_PAYMENT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  ARCHIVED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
